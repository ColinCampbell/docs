<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>SproutCore</title>
  <meta name="description" content="A framework for building fast, desktop caliber web applications." />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="/css/api.css" />
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.js"></script>
  <script src="/js/jquery-bbq.js"></script>
  <script src="/js/api.js"></script>
  <script src="/js/lib/modernizr-1.7.min.js"></script>
  <!--[if lt IE 9]>
  <script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->
</head>

  <body id="docs">
<!-- ============================== header ================================= -->
    <!-- begin static/header.html -->
    {+include("static/header.html")+}
    <!-- end static/header.html -->

<!-- ============================== classes index ============================ -->

    <section id="list">
      <header>
        <form action="#" role="search">
          <input type="text" />
          <a href="#" class="search-reset"></a>
        </form>
      </header>
      <div>
        {+publish.classesIndex+}
      </div>
    </section>
    <footer>
      <a href="http://groups.google.com/group/sproutcore" class="button secondary">SUBSCRIBE TO MAILING LIST</a>
    </footer>

    <div role="main">
      <section class="documentation class">
        <header>
<!-- ============================== class title ============================ -->
          <h1 class="classTitle">
            {!
              var classType = "",
                  className = data.alias;

              if (data.deprecated) {
                classType += "(DEPRECATED) ";
              }

              if (data.isBuiltin()) {
                classType += "Built-In ";
              }

              if (data.isNamespace) {
                var srcFile = (typeof data.srcFile === 'string') ? data.srcFile : '';

                if (data.is('FUNCTION')) {
                  classType += "Function ";
                } else if (srcFile.match(/\/protocols\//)) {
                  classType += "Protocol ";
                } else if (srcFile.match(/\/mixins\//)) {
                  classType += "Mixin ";
                } else if (srcFile.match(/\/delegates\//)) {
                  classType += "Delegate ";
                } else {
                  classType += "Namespace ";
                }
              }
              else {
                classType += "Class ";
              }

              if (className === "_global_") {
                className = "Global Scope"
              }
            !}
            <span>{+classType+}</span>{+className+}
          </h1>

          <if test="data.augments.length">
            <h2 class="extends">
              <span>Extends&nbsp;</span>
              {+
                data.augments
                .sort()
                .map(
                  function($) { return new Link().toSymbol($); }
                )
                .join(", ")
              +}
            </h2>
          </if>


          <if test="data.deprecated">
            <h2 class="deprecated">
              {+resolveLinks(data.deprecated)+}
            </h2>
          </if>

        </header>

        <if test="!data.isBuiltin()">{# isn't defined in any file #}
          <div class="definedin">Defined in: {+new Link().toSrc(data.srcFile)+}.</div>
        </if>

        <div class="class-description">
          {+resolveLinks(data.classDesc)+}
        </div>

<!-- ============================== properties summary ===================== -->
        {!
          var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")),
              classProperties = ownProperties.filter(function($){return !$.alias.match(/#/)}),
              instanceProperties = ownProperties.filter(function($){return $.alias.match(/#/)}),
              propertyGroups = [["Static", classProperties], ["Instance", instanceProperties]];
        !}
        <if test="data.properties.length">
          <div class="overview properties-overview">
            <h2>Property Overview</h2>
            <for each="group" in="propertyGroups">
              {! var name = group[0], properties = group[1]; !}
              <if test="properties && properties.length">
                <div class="group properties-group">
                  <h3>{+name+} Properties</h3>
                  <ul>
                    <for each="member" in="properties">
                      <li>
                        <if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if>{+new Link().toSymbol(member.alias).withText(member.name)+}
                      </li>
                    </for>
                  </ul>
                </div>
              </if>
            </for>

            <if test="data.inheritsFrom.length">
            {!
              var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias}),
                  contributors = [];
              borrowedMembers.map(function($) { if (contributors.indexOf($.memberOf) === -1) contributors.push($.memberOf) });
            !}
              <if test="contributors.length">
                <div class="inherits">
                  <h3>Inherited Properties</h3>
                  <for each="contributor" in="contributors">
                    <div class="inherit">
                      <h4>from {+new Link().toSymbol(contributor)+}</h4>

                      <ul>
                        {!
                          var inheritedProperties = borrowedMembers.filter(function($) { return $.memberOf == contributor })
                              .sort(makeSortby("name"))
                              .map(function($) { return new Link().toSymbol($.alias).withText($.name) })
                        !}
                        <for each="property" in="inheritedProperties">
                          <li>{+property+}</li>
                        </for>
                      </ul>
                    </div>
                  </for>
                </div>
              </if>
            </if>
          </div>
        </if>

<!-- ============================== methods summary ======================== -->
      {!
        var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")),
            classMethods = ownMethods.filter(function($){return !$.alias.match(/#/)}),
            instanceMethods = ownMethods.filter(function($){return $.alias.match(/#/)}),
            methodGroups = [["Static", classMethods], ["Instance", instanceMethods]];
      !}
      <if test="classMethods.length > 0 || instanceMethods.length > 0">
        <div class="overview methods-overview">
          <h2>Method Overview</h2>

          <for each="group" in="methodGroups">
            {! var name = group[0], methods = group[1]; !}
              <if test="methods.length">
                <h3>{+name+} Methods</h3>

                <div class="group methods-group">
                  <ul>
                    <for each="member" in="methods">
                      {!
                        var params = member.params,
                            paramsText = params ? '(' + params.map(function($) { return $.name; }).join(', ') + ')' : '';
                      !}
                      <li><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if>{+new Link().toSymbol(member.alias).withText(member.name.replace(/\^\d+$/, '')) +}<span class="params">{+ paramsText +}</span></li>
                    </for>
                  </ul>
                </div>
              </if>
          </for>
        </div>
      </if>
<!-- ============================== events summary ======================== -->
      <if test="data.events.length">
        {! var ownEvents = data.events.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
        <if test="ownEvents.length">
        <table class="summaryTable" cellspacing="0" summary="A summary of the events documented in the class {+data.alias+}.">
          <caption>Event Summary</caption>
          <thead>
            <tr>
              <th scope="col">Event Attributes</th>
              <th scope="col">Event Name and Description</th>
            </tr>
          </thead>
          <tbody>
          <for each="member" in="ownEvents">
            <tr>
              <td class="attributes">
              </td>
              <td class="nameDescription">
                <div class="fixedFont"><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name)+}</b>{+makeSignature(member.params)+}
                </div>
                <div class="description">{+resolveLinks(summarize(member.desc))+}</div>
              </td>
            </tr>
          </for>
          </tbody>
        </table>
        </if>


      </if>



<!-- ============================== field details ========================== -->
      <for each="group" in="propertyGroups">
        {! var name = group[0], properties = group[1]; !}
        <if test="properties && properties.length">
          <div class="properties">
            <h2>{+name+} Properties</h2>
            <for each="member" in="properties">
              <div class="class-member property">
                 <a name="{+Link.symbolNameToLinkName(member)+}"> </a>
                <h3>
                  <if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if>{+member.name+}
                </h3>

                <div class="details">
                  <if test="member.desc">
                    <div class="description">
                      {+resolveLinks(member.desc)+}
                      <if test="member.srcFile != data.srcFile || member.packageName != data.packageName">
                        <div class="definedin">Defined in <span class="package">{+member.packageName+}</span> ({+new Link().toSrc(member.srcFile)+}).</div>
                      </if>
                      <if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
                    </div>
                  </if>

                  <if test="member.example.length">
                    <div class="examples">
                      <h4>Examples</h4>
                      <for each="example" in="member.example">
                        <pre class="code">{+example+}</pre>
                      </for>
                    </div>
                  </if>

                  <if test="member.deprecated">
                    <div class="deprecated">
                      <h4>Deprecated</h4>
                      <div>
                        {+ resolveLinks(member.deprecated) +}
                      </div>
                    </div>
                  </if>

                  <if test="member.type">
                    <div class="type">
                      <h4>Type</h4>
                      <div>
                        <span class="type">{+new Link().toSymbol(member.type)+}</span>
                      </div>
                    </div>
                  </if>

                  <if test="member.defaultValue">
                    <div class="default-value">
                      <h4>Default Value</h4>
                      <div>
                        {+resolveLinks(member.defaultValue)+}
                      </div>
                    </div>
                  </if>

                  <if test="member.since">
                    <div class="since">
                      <h4>Since</h4>
                      <div>
                        {+ member.since +}
                      </div>
                    </div>
                  </if>

                  <if test="member.see.length">
                    <div class="see">
                      <h4>See</h4>
                      <div>
                        <for each="item" in="member.see">
                          <span>{+ new Link().toSymbol(item) +}</span>
                        </for>
                      </div>
                    </div>
                  </if>
                </div>
              </div>
            </for>
          </div>
        </if>
      </for>


<!-- ============================== method details ========================= -->
      <for each="group" in="methodGroups">
        {! var name = group[0], methods = group[1]; !}
        <if test="methods.length">
          <div class="methods">
            <h2>{+name+} Methods</h2>
            <for each="member" in="methods">
              <div class="class-member method">
                {!
                  var params = member.params,
                      paramsText = params ? '(' + params.map(function($) { return $.name; }).join(', ') + ')' : '';
                !}
                 <a name="{+Link.symbolNameToLinkName(member)+}"> </a>
                <h3><if test="name == 'Static' && member.memberOf != '_global_'">{+member.memberOf+}.</if>{+member.name.replace(/\^\d+$/, '')+}<span class="params">{+ paramsText +}</span></h3>

                <div class="details">
                  <if test="member.desc">
                    <div class="description">
                      {+resolveLinks(member.desc)+}
                      <if test="member.srcFile != data.srcFile || member.packageName != data.packageName">
                        <div class="definedin">Defined in <span class="package">{+member.packageName+}</span> ({+new Link().toSrc(member.srcFile)+}).</div>
                      </if>
                      <if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
                    </div>
                  </if>

                  <if test="member.example.length">
                    <div class="examples">
                      <h4>Examples</h4>
                      <for each="example" in="member.example">
                        <pre class="code">{+example+}</pre>
                      </for>
                    </div>
                  </if>

                  <if test="member.deprecated">
                    <div class="deprecated">
                      <h4>Deprecated</h4>
                      <div>
                        {+ resolveLinks(member.deprecated) +}
                      </div>
                    </div>
                  </if>

                  <if test="member.since">
                    <div class="since">
                      <h4>Since</h4>
                      <div>
                        {+ member.since +}
                      </div>
                    </div>
                  </if>

                  <if test="member.params.length">
                    <div class="parameters">
                      <h4>Parameters</h4>
                      <dl>
                        <for each="item" in="member.params">
                          <dt>{+item.name+}</dt>
                          <dd>
                            &mdash;
                            <if test="item.type">
                              <span class="type">{+ new Link().toSymbol(item.type) +} &mdash;</span>
                            </if>
                            <span class="description">
                              {+resolveLinks(item.desc)+}
                            </span>
                            <if test="item.isOptional">
                              <span class="token optional">Optional</span>
                            </if>
                            <if test="item.defaultValue">
                              <span class="token default">Default: {+item.defaultValue+}</span>
                            </if>
                          </dd>
                        </for>
                      </dl>
                    </div>
                  </if>

                  <if test="member.returns.length">
                    <div class="returns">
                      <h4>Returns</h4>
                      <div>
                        <for each="item" in="member.returns">
                          <span class="type">{+ new Link().toSymbol(item.type) +}</span>
                          <if test="item.type && item.desc"> &mdash; </if>
                          <span class="description">{+resolveLinks(item.desc)+}</span>
                        </for>
                      </div>
                    </div>
                  </if>

                  <if test="member.exceptions.length">
                    <div class="exceptions">
                      <h4>Throws</h4>
                      <div>
                        <dl>
                        <for each="item" in="member.exceptions">
                          <span class="type">{+ new Link().toSymbol(item.type) +}</span>
                          <if test="item.type && item.desc"> &mdash; </if>
                          <span class="description">{+resolveLinks(item.desc)+}</span>
                        </for>
                        </dl>
                      </div>
                    </div>
                  </if>

                  <if test="member.requires.length">
                    <div class="requires">
                      <h4>Requires</h4>
                      <div>
                        <for each="item" in="member.requires">
                          <dd>{+ resolveLinks(item) +}</dd>
                        </for>
                      </div>
                    </div>
                  </if>

                  <if test="member.see.length">
                    <div class="see">
                      <h4>See</h4>
                      <div>
                        <for each="item" in="member.see">
                          <span>{+ new Link().toSymbol(item) +}</span>
                        </for>
                      </div>
                    </div>
                  </if>

                </div>
              </div>
            </for>
          </div>
        </if>
      </for>

<!-- ============================== event details ========================= -->
      <if test="defined(ownEvents) && ownEvents.length">
        <div class="sectionTitle">
          Event Detail
        </div>
        <for each="member" in="ownEvents">
          <a name="event:{+Link.symbolNameToLinkName(member)+}"> </a>
          <div class="fixedFont">
            <if test="member.type"><span class="light">{+new Link().toSymbol(member.type)+}</span></if>
            <if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>{+makeSignature(member.params)+}
          </div>
          <div class="description">
            {+resolveLinks(member.desc)+}
            <if test="member.srcFile != data.srcFile">
              <br />
              <span class="definedin">Defined in:  {+new Link().toSrc(member.srcFile)+}.</span>
            </if>
            <if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
          </div>

          <if test="member.example.length">
          <for each="example" in="member.example">
          <pre class="code">{+example+}</pre>
          </for>
          </if>

            <if test="member.params.length">
              <dl class="detailList">
              <dt class="heading">Parameters:</dt>
              <for each="item" in="member.params">
                <dt>
                  {+((item.type)?"<span class=\"light fixedFont\">"+(new Link().toSymbol(item.type))+"</span> " : "")+}<b>{+item.name+}</b>
                  <if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
                </dt>
                <dd>{+ resolveLinks(item.desc) +}</dd>
              </for>
              </dl>
            </if>
            <if test="member.deprecated">
              <dl class="detailList">
              <dt class="heading">Deprecated:</dt>
              <dt>
                {+ resolveLinks(member.deprecated) +}
              </dt>
              </dl>
            </if>
            <if test="member.since">
              <dl class="detailList">
              <dt class="heading">Since:</dt>
                <dd>{+ member.since +}</dd>
              </dl>
              </dl>
            </if>
            <if test="member.exceptions.length">
              <dl class="detailList">
              <dt class="heading">Throws:</dt>
              <for each="item" in="member.exceptions">
                <dt>
                  {+((item.type)?"<span class=\"light fixedFont\">"+(new Link().toSymbol(item.type))+"</span> " : "")+} <b>{+item.name+}</b>
                </dt>
                <dd>{+ resolveLinks(item.desc) +}</dd>
              </for>
              </dl>
            </if>
            <if test="member.returns.length">
              <dl class="detailList">
              <dt class="heading">Returns:</dt>
              <for each="item" in="member.returns">
                <dd>{+((item.type)?"<span class=\"light fixedFont\">"+(new Link().toSymbol(item.type))+"</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
              </for>
              </dl>
            </if>
            <if test="member.requires.length">
              <dl class="detailList">
              <dt class="heading">Requires:</dt>
              <for each="item" in="member.requires">
                <dd>{+ resolveLinks(item) +}</dd>
              </for>
              </dl>
            </if>
            <if test="member.see.length">
              <dl class="detailList">
              <dt class="heading">See:</dt>
              <for each="item" in="member.see">
                <dd>{+ new Link().toSymbol(item) +}</dd>
              </for>
              </dl>
            </if>

        </for>
      </if>



<!-- ============================== footer ================================= -->
        <div class="fineprint" style="clear:both">
          <if test="JSDOC.opt.D.copyright">&copy;{+JSDOC.opt.D.copyright+}<br /></if>
          Documentation generated by <a href="http://code.google.com/p/jsdoc-toolkit/" target="_blank">JsDoc Toolkit</a> {+JSDOC.VERSION+} on {+new Date()+}
        </div>
      </section>
    </div>
  </body>
</html>
